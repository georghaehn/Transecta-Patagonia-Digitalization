header1 <- header0 %>%
dplyr::select(-c("Height_Nothofagus_pumilio_cm",
"Height_Berberis_buxifolia_cm",
#"Height_tree_layer_m",
"Height_Tepualia_stipularis_cm",
"Height_Nothofagus_antarctica_cm",
"Height_Nothofagus_betuloides_cm",
"Height_Pilgerodendron_uviferum_cm",
"Height_Drimys_winteri_cm")) |>
#reorder columns
dplyr::select(
#metadata
"PlotID",
"Date",
#"Location",
"Country",
"Latitude",
"Longitude",
"Location_uncertainty_km",
"Releve_area_m2",
"Note",
#env conditions
"Elevation_m",
"Aspect",
"Slope_perc",
"Soil_type",
"Soil_depth_first_horizon_cm",
"Soil_depth_cm",
"Degraded_soil_perc",
"Vegetation_belt",
#veg description
"Total_vegetation_cover",
"Height_tree_layer_m",
"Condition",
"Vegetation_physiognomy",
#external data
"FaberLangendoen_formation",
"Forest",
"Shrubland",
"Grassland",
"Wetland",
"Sparse_vegetation"
) |>
mutate_at(.vars = vars(Latitude,
Longitude,
Location_uncertainty_km,
Releve_area_m2), .funs = ~as.numeric(.)) |>
mutate_at(.vars = vars(Latitude, Longitude),
.funs = ~round(., 4))  |>  #round lat long to 4th decimal
mutate(Date = lubridate::parse_date_time(Date, c("%d/%m/%y",  "%m.%y", "%y-%m-%d"))) |>
mutate(Date = lubridate::as_date(Date)) |>
mutate(FaberLangendoen_formation = factor(FaberLangendoen_formation))
species_heights <- header_long2 |>
mutate_at(.vars = vars(starts_with("Height")),
.funs = ~as.character(.)) |>
filter_at(vars(starts_with("Height")), any_vars(!is.na(.))) |>
dplyr::select(PlotID, starts_with("Height")) |>
pivot_longer(-PlotID, names_to = "Variable", values_to = "Height_cm") |>
mutate(Variable = str_remove(Variable, "Height_")) |>
separate(Variable,into = c("Genus", "species", "um"), sep = "_") |>
unite("Species", Genus:species, sep = " ") |>
filter(Species != "tree layer") |>
dplyr::select(-um) |>
filter(!is.na(Height_cm))
#Paste Height values to DT
DT1 <- df.out |>
left_join(species_heights, by = c("PlotID", "Species")) |>
relocate(Abundance, .after = Original_species) |>
relocate(Note, .after = last_col())
#select 5 random plots
sampled_plots <- header1 |>
slice_sample(n = 5) |>
pull(PlotID)
#show header
header1 |>
filter(PlotID %in% sampled_plots) |>
kbl() |>
kable_classic()
#show DT
DT1 |>
filter(PlotID %in% sampled_plots) |>
kbl() |>
kable_classic()
metadata <- lst[[1]]
out <- createWorkbook()
addWorksheet(out, "METADATA")
addWorksheet(out, "DT")
addWorksheet(out, "HEADER")
writeData(out, sheet = "DT", x = DT1)
writeData(out, sheet = "HEADER", x = header1)
writeData(out, sheet = "METADATA", x = metadata)
saveWorkbook(out, file = file.path(output_path, "WB-Transecta-Patagonia-v04-2023.xlsx"), overwrite = TRUE)
save(DT1, header1, file = file.path(output_path, "R-Image-Transecta-Patagonia-v04-2023.RData"))
write_csv(header1, file.path(output_path, "Header-Transecta-Patagonia-v04-2023.csv"))
write_csv(DT1, file.path(output_path, "DT-Transecta-Patagonia-v04-2023.csv"))
sessionInfo()
cat(readLines(file.path(temp_path, "Unresolved-Species-Tagged-v04-2023.csv")), sep = '\n')
libs <- c("tidyverse",
"sf",
"rnaturalearth",
"patchwork",
"openxlsx")
invisible(lapply(libs, library, character.only = TRUE))
output_path <- "../Data/Output-data"
load(file.path(output_path, "R-Image-Transecta-Patagonia-v04-2023.RData"))
figure_path <- "../Manuscript/TablesPics"
dir.exists(c(output_path, figure_path))
### Create table 2 ####
um <- c("Date" = "yyyy-mm-dd",
"Latitude" = "° (WGS84)",
"Longitude" = "° (WGS84)",
"Location_uncertainty_km" = "km",
"Releve_area_m2" = "m^2^",
"Elevation_m" = "m a.s.l.",
"Slope_perc" = "%",
"Degraded_soil_perc" = "%",
"Total_vegetation_cover" = "%",
"Height_tree_layer_m" = "m")
um <- data.frame(Variable = names(um), `Unit of Measurement` = um)
table2 <- header1 |>
dplyr::summarize_all(#.vars=vars(!starts_with("PlotID")),
.funs = list(xxxNo.records = ~sum(!is.na(.)),
xxxType.of.variable = ~ifelse("logical" %in% class(.), "b",
ifelse("ordered" %in% class(.),
"o",
ifelse(any(class(.) %in% c("character", "factor")),
"c",
ifelse(class(.) == "Date",
"d",
"n")))),
xxxLevels = ~(ifelse(is.numeric(.) | lubridate::is.Date(.),
paste(range(., na.rm = TRUE), collapse = " - "),
ifelse(is.ordered(.),
paste(paste(1:nlevels(.),
levels(.), sep = " = "), collapse = ", "),
ifelse(is.factor(.),
paste(levels(.), collapse = ", "),
ifelse(is.logical(.),
paste(names(table(.)), "=", table(.),
collapse = "; "),
""))))))) |>
gather(key = "Variable") |>
separate(Variable, into = c("Variable", "feature"), sep = "_xxx") |>
spread(key = feature, value = value) |>
rename(`Range/Levels` = Levels) |>
mutate(Variable = factor(Variable, levels = colnames(header1))) |>
arrange(Variable) |>
left_join(um, by = "Variable") |>
mutate(Unit.of.Measurement = as.character(Unit.of.Measurement)) |>
replace_na(list(Unit.of.Measurement = "")) |>
dplyr::select(Variable,
`Range/Levels`,
`Unit of Measurement` = Unit.of.Measurement,
`Nr. of plots with information` = No.records,
`Type` = Type.of.variable)
openxlsx::write.xlsx(table2, file.path(draft_path, "Table2-Header-v04-2023.xlsx"), overwrite = TRUE)
draft_path <- "../Manuscript/TablesPics"
openxlsx::write.xlsx(table2, file.path(draft_path, "Table2-Header-v04-2023.xlsx"), overwrite = TRUE)
# Some exploratory analyses: ####
### Create Map of plots ####
world <- ne_countries(scale = "large", returnclass = "sf", continent = "south america")
header1.sf <- st_as_sf(header1,
coords = c("Longitude", "Latitude"),
crs =  4326)
header1.sf <- st_as_sf(header1,
coords = c("Longitude", "Latitude"),
CRS =  4326)
# Some exploratory analyses: ####
### Create Map of plots ####
world <- ne_countries(scale = "large", returnclass = "sf", continent = "south america")
header1.sf <- st_as_sf(header1,
coords = c("Longitude", "Latitude"),
crs =  4326)
## Double check country match with spatial coordinates
st_intersection(header1.sf %>%
select(PlotID, Country, Location_uncertainty_km), world[, "iso_a3"]) %>%
filter(Country != iso_a3)
southam <- read_sf("../../output_share_to_FS/_ancillary/Spatial/SouthAmerica.shp")
## Create buffers around each point to show location uncertainties
myBuff <- st_buffer(header1.sf |>
st_transform(crs=9822),  #lambers equal area conic
dist = header1.sf |>
mutate(Location_uncertainty_km =
ifelse(Location_uncertainty_km == 200,
250,
Location_uncertainty_km)) |>
pull(Location_uncertainty_km) * 2000) |>
st_transform(crs = 4326)
## Plot
ylabs <- -51: -53
xlabs <- -68: -75
(left <- ggplot() +
theme_minimal() +
geom_sf(data = southam, fill = gray(0.8), col = gray(0.6)) +
geom_sf(data = header1.sf, col = "dark red") + #aes(col=Country)) +
#geom_sf(data=myBuff, col="black", fill=NA) +
coord_sf(xlim = c(-75, -68), ylim = c(-53, -50.5), ) +
scale_y_continuous(breaks = ylabs) +
scale_x_continuous(breaks = xlabs) +
#scale_color_brewer(palette="Set1")+
theme(panel.border = element_rect(colour = "black", fill = NA, linewidth = 1))
)
dev.off
dev.off()
dev.new
dev.new()
(left <- ggplot() +
theme_minimal() +
geom_sf(data = southam, fill = gray(0.8), col = gray(0.6)) +
geom_sf(data = header1.sf, col = "dark red") + #aes(col=Country)) +
#geom_sf(data=myBuff, col="black", fill=NA) +
coord_sf(xlim = c(-75, -68), ylim = c(-53, -50.5), ) +
scale_y_continuous(breaks = ylabs) +
scale_x_continuous(breaks = xlabs) +
#scale_color_brewer(palette="Set1")+
theme(panel.border = element_rect(colour = "black", fill = NA, linewidth = 1))
)
left
(left <- ggplot() +
theme_minimal() +
geom_sf(data = southam, fill = gray(0.8), col = gray(0.6)) +
geom_sf(data = header1.sf, col = "dark red") + #aes(col=Country)) +
#geom_sf(data=myBuff, col="black", fill=NA) +
coord_sf(xlim = c(-75, -68), ylim = c(-53, -50.5), ) +
scale_y_continuous(breaks = ylabs) +
scale_x_continuous(breaks = xlabs) +
#scale_color_brewer(palette="Set1")+
theme(panel.border = element_rect(colour = "black", fill = NA, linewidth = 1))
)
bbox <- sf::st_bbox(header1.sf)
bbox <- sf::st_bbox(header1.sf)
bbox[[1]] <- -77
bbox[[3]] <- -67
bbox[[2]] <- -53
bbox[[4]] <- -49
bbox <- bbox %>%
sf::st_as_sfc()
bbox <- bbox |>
sf::st_as_sfc()
bbox <- sf::st_bbox(header1.sf)
bbox[[1]] <- -77
bbox[[3]] <- -67
bbox[[2]] <- -53
bbox[[4]] <- -49
bbox <- bbox |>
sf::st_as_sfc()
right <- ggplot(data = header1.sf) +
theme_void() +
geom_sf(data = southam, fill = gray(0.8), col = gray(0.6)) +
geom_sf(data = bbox, fill = NA, col = "black", linewidth = 1.2) +
geom_sf_text(data = bbox, aes(label = "a"), nudge_x = 8, nudge_y = 3) +
coord_sf(xlim = c(-82, -35), ylim = c(12, -56)) +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1))
right <- ggplot(data = header1.sf) +
theme_void() +
geom_sf(data = southam, fill = gray(0.8), col = gray(0.6)) +
geom_sf(data = bbox, fill = NA, col = "black", linewidth = 1.2) +
geom_sf_text(data = bbox, aes(label = "a"), nudge_x = 8, nudge_y = 3) +
coord_sf(xlim = c(-82, -35), ylim = c(12, -56)) +
theme(panel.border = element_rect(colour = "black", fill = NA, linewidth = 1))
both <- left + right + patchwork::plot_annotation(tag_levels = "a",)
ggsave(plot = both,
file.path(draft_path, "Figure1_Studyarea.png"),
dpi = 300, bg = "white",
type = "cairo", width = 8, height = 4, units = "in")
header1.sel <- header1 |>
filter(Location_uncertainty_km < 200) |>
rename(FB = FaberLangendoen_formation)
header1.sf.jitter <- st_as_sf(header1.sel |>
mutate(Latitude = jitter(Latitude, amount = 0.08),
Longitude = jitter(Longitude, amount = 0.08)),
coords = c("Longitude", "Latitude"),
crs = 4326)
SR_data <- DT1 |>
filter(PlotID %in% (header1.sf.jitter |>
pull(PlotID))) |>
count(PlotID) |>
rename(SR = n) |>
left_join(header1.sel |>
dplyr::select(PlotID, Longitude, FB),
by = "PlotID") |>
arrange(Longitude)
ggsave(plot = both,
file.path(draft_path, "Figure1-Studyarea.png"),
dpi = 300, bg = "white",
type = "cairo", width = 8, height = 4, units = "in")
SR_data <- DT1 |>
filter(PlotID %in% (header1.sf.jitter |>
pull(PlotID))) |>
count(PlotID) |>
rename(SR = n) |>
left_join(header1.sel |>
dplyr::select(PlotID, Longitude, FB),
by = "PlotID") |>
arrange(Longitude)
(SR_long <- ggplot(data = SR_data, aes(x = Longitude, y = SR)) +
geom_point(aes(col = FB), show.legend = FALSE) +
geom_smooth(method = "gam") +
theme_minimal() +
coord_fixed(ratio = 0.05) +
scale_x_continuous(limits = c(-75, -68))+
scale_y_continuous(name = "No of species") +
scale_color_brewer(palette = "Set1", drop = FALSE) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.minor.y = element_blank() )
)
(left2 <- ggplot(data = header1.sf.jitter) +
theme_minimal() +
geom_sf(data = southam, fill = gray(0.8), col = gray(0.6)) +
geom_sf(aes(col = FB)) +
coord_sf(xlim = c(-75, -68),
ylim = c(-53, -50.5)) +
scale_y_continuous(breaks = ylabs) +
scale_x_continuous(breaks = xlabs) +
scale_color_brewer(palette = "Set1",
name = "Faber-Langendoen\n Formation",
drop = FALSE,
labels = stringr::str_extract(levels(header1.sf.jitter$FB), "^.{5}"))
)
SR_long + left2 + patchwork::plot_layout(nrow = 2) + patchwork::plot_annotation(tag_levels = "a",)
ggsave(last_plot(),
filename = file.path(draft_path, "Figure4-Richness-Longitude.png"),
width = 11, height = 7, dpi = 300, units = "in", bg = "white", type = "cairo")
### Barplot showing the number of plots per vegetation type ####
(ggplot(data = header1) +
geom_bar(aes(x = FaberLangendoen_formation,
group = FaberLangendoen_formation,
col = FaberLangendoen_formation,
fill = FaberLangendoen_formation)) +
theme_minimal() +
scale_y_continuous(name = "N° of vegetation plots") +
scale_x_discrete(labels = stringr::str_extract(levels(header1$FaberLangendoen_formation), "^.{5}")) +
scale_color_brewer(palette = "Set1", name = "Faber-Langendoen Formation") +
scale_fill_brewer(palette = "Set1", name = "Faber-Langendoen Formation") +
theme(axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
)
ggsave(last_plot(),
filename= file.path(draft_path, "Figure2-Vegtypes.png"),
width = 10, height = 4, dpi = 300, units = "in", bg = "white")
### Boxplot of species richness per formation ####
SR_data_all <- DT1 |>
filter(PlotID %in% (header1 |>
pull(PlotID))) |>
count(PlotID) |>
rename(SR = n) |>
left_join(header1 |>
dplyr::select(PlotID,
Longitude,
FB = FaberLangendoen_formation),
by = "PlotID") |>
arrange(Longitude)
ggplot(data = SR_data_all, aes(x = FB, y = SR, fill = FB)) +
geom_boxplot(show.legend = FALSE,
outlier.shape = NA
) +
geom_point(
#    aes(color = FB,
#        color = after_scale(darken(color, .2, space = "HLS"))),
color = "black",
fill = "white",
shape = 21,
stroke = 0.4,
size = 2,
position = position_jitter(seed = 1, width = 0.12),
show.legend = FALSE
)  +
geom_point(
aes(fill = FB),
color = "transparent",
shape = 21,
stroke = 0.4,
size = 2,
alpha = 0.7,
position = position_jitter(seed = 1, width = 0.12),
show.legend = FALSE
) +
theme_minimal() +
scale_fill_brewer(palette = "Set1", name = "Faber-Langendoen Formation") +
scale_color_brewer(palette = "Set1") +
scale_y_continuous(name = "Number of species") +
scale_x_discrete(labels = stringr::str_extract(levels(SR_data_all$FB), "^.{5}")) +
theme(axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
ggsave(last_plot(),
filename = file.path(draft_path, "Figure3-Richness-Vegtypes.png"),
width = 7, height = 3.5, dpi = 300, units = "in", bg = "white")
library(elevatr)
mydem <- get_elev_point(locations = header1.sf, src = "aws", zoom = 7)
SR_data1 <- SR_data |>
left_join(mydem |>
dplyr::select(PlotID, elevation),
by = "PlotID") |>
filter(elevation > 0) |>
filter(FB != "2.C.5 Salt Marsh") |>   ##drop level without enough obs
mutate(FB = factor(FB))
ggplot(data = SR_data1, aes(x = SR, y = elevation)) +
geom_point(aes(col = FB)) +
scale_color_brewer(palette = "Set1") +
theme_bw() +
theme(legend.position = "bottom")
## TRY REFITTING THE MODELS WITH CONTRASTS
mod0 <- lm(SR ~ elevation, data = SR_data1)
summary(mod0)
(newdata <- data.frame(pred = NA,
elevation = rep(seq(0, max(SR_data1$elevation), length=100),
nlevels(SR_data1$FB)),
FB = factor(rep(levels(SR_data1$FB), each = 100))) |>
as_tibble() |>
mutate(pred = predict.lm(mod1, newdata={.})) |>
left_join((SR_data1 |>
group_by(FB) |>
summarize(max.elev = max(elevation),
min.elev = min(elevation))),
by = "FB") |>
filter(elevation < max.elev & elevation > min.elev))
mod1 <- lm(SR ~ elevation*FB, data=SR_data1)
summary(mod1)
(newdata <- data.frame(pred = NA,
elevation = rep(seq(0, max(SR_data1$elevation), length=100),
nlevels(SR_data1$FB)),
FB = factor(rep(levels(SR_data1$FB), each = 100))) |>
as_tibble() |>
mutate(pred = predict.lm(mod1, newdata={.})) |>
left_join((SR_data1 |>
group_by(FB) |>
summarize(max.elev = max(elevation),
min.elev = min(elevation))),
by = "FB") |>
filter(elevation < max.elev & elevation > min.elev))
(newdata <- data.frame(pred = NA,
elevation = rep(seq(0, max(SR_data1$elevation), length=100),
nlevels(SR_data1$FB)),
FB = factor(rep(levels(SR_data1$FB), each = 100))) |>
as_tibble() |>
mutate(pred = predict.lm(mod1, newdata={cur_data()})) |>
left_join((SR_data1 |>
group_by(FB) |>
summarize(max.elev = max(elevation),
min.elev = min(elevation))),
by = "FB") |>
filter(elevation < max.elev & elevation > min.elev))
SR_data2 <- SR_data1 |>
mutate(FB = factor(FB, levels = levels(header1$FaberLangendoen_formation)))
ggplot(data = SR_data2,
aes(x = elevation, y = SR)) +
geom_point(aes(col = FB)) +
geom_line(data = newdata, aes(x = elevation, y = pred, group = FB, col = FB)) +
scale_color_brewer(name = "Faber-Langendoen\nFormations",
palette = "Set1",
drop = FALSE,
labels = stringr::str_extract(levels(SR_data2$FB), "^.{5}")) +
scale_x_continuous(name = "Elevation (m a.s.l.)") +
scale_y_continuous(name = "Species Richness") +
theme_bw() #+
ggsave(last_plot(),
filename = file.path(draft_path, "Figure5-Richness-Elevation.png"),
width = 6, height = 4, dpi = 300, units = "in", bg = "white")
ggplot(data = SR_data2,
aes(x = elevation, y = SR)) +
geom_point(aes(col = FB)) +
geom_line(data = newdata, aes(x = elevation, y = pred, group = FB, col = FB)) +
scale_color_brewer(name = "Faber-Langendoen\nFormations",
palette = "Set1",
drop = FALSE,
labels = stringr::str_extract(levels(SR_data2$FB), "^.{5}")) +
scale_x_continuous(name = "Elevation (m a.s.l.)") +
scale_y_continuous(name = "Species Richness") +
theme_bw() #+
ggsave(last_plot(),
filename = file.path(draft_path, "Figure5-Richness-Elevation.png"),
width = 6, height = 4, dpi = 300, units = "in", bg = "white")
### NMDS ordination of vegetation plots ####
library(vegan)
#Ancillary function
# Combine cover accounting for layers
combine.cover <- function(x){
while (length(x) > 1){
x[2] <- x[1] + (100 - x[1]) * x[2] / 100
x <- x[-1]
}
return(x)
}
sp_plot <- DT1 |>
mutate(Abundance = fct_recode(Abundance,
"0.01" = "r",
"0.05" = "+",
"2.5" = "1",
"15" = "2",
"37.5" = "3",
"62." = "4",
"87.5" = "5")) |>
mutate(Abundance = as.numeric(as.character(Abundance))) |>
group_by(PlotID, Species) |>
summarize(Abundance = combine.cover(Abundance)) |>
dplyr::select(PlotID, Species, Abundance) |>
pivot_wider(names_from = Species,
values_from = Abundance,
values_fill = 0) |>
as.data.frame() |>
column_to_rownames("PlotID") |>
vegdist(method = "bray")
mymds <- metaMDS(comm = sp_plot, k = 2)
myclust <- hclust(sp_plot, method = "average")
load("C:/Users/georg/Nextcloud/HiWi_sPlot_project_FS_GH/1.transecta_patagonica/__Submission/JVS/R0/Data/Output-data/R-Image-Transecta-Patagonia-v04-2023.RData")
colnames(DT1)
unique(DT1$Taxon_group)
unique(DT1$Match_level)
unique(DT1$Note)
colnames(header1)
colnames(header1)
